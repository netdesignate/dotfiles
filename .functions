function get.functions() {
  if [ -f ~/.functions ]; then
      mv ~/.functions ~/.functions.original
      cd ~
      wget https://raw.githubusercontent.com/netdesignate/dotfiles/master/.functions
      . ~/.functions
  fi
}

function myip(){ dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | sed 's/"//g'; }
function aptmods(){ apt list --installed | grep $1 | cut -d '/' -f1; }

# drupal updates follow
# =====================
function upd-kunda() {
    if [ "$(whoami)" != "donmc" ]; then
        echo "Script must be run as user: username"
        return 255
    else
        cd /var/www/kunda.com.au  # or alias "cdk"
        drush pm-update  
    fi
}

function upd-ce10() {
    if [ "$(whoami)" != "donmc" ]; then
        echo "Script must be run as user: username"
        return 255
    else
        cd /var/www/ce10
        printf "Current Working Directory is: $(pwd)\nBeginning Composer update now...\nRunning \"composer.2.7.6 update \"drupal/core-*\" --with-all-dependencies\"\n\n"
        composer.2.7.6 update "drupal/core-*" --with-all-dependencies
    fi
}
export -f upd-ce10
export -f upd-kunda
#==================
urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }
# x="http%3A%2F%2Fstackoverflow.com%2Fsearch%3Fq%3Durldecode%2Bbash"
# y=$(urldecode "$x")
# echo "$y"
# http://stackoverflow.com/search?q=urldecode+bash

# reverse DNS (convert IP to DNS name)
function dug() { dig +short -x $(dig +short $1); }

# convert to uppercase:
function uc() { echo "$@"|awk '{print toupper($0)}'; }

# convert to lowercase:
function lc() { echo "$@"|awk '{print tolower($0)}'; }

function histgrep() {
  local n_lines=20
  if [[ "$1" =~ ^[0-9]*$ ]]; then
    n_lines="$1"
    shift
  fi
  tac ~/.history | grep "$@" | tail -n "$n_lines"
}

# 'nocomment' -- Strips whitespace and comments from PHP Code file
function nocomment() { 
  grep -v '^\s*//' $1 | grep -v '^\s*#' | grep -v '^\s*/\*' | grep -v '^\s*\*'  | grep -v '^\s*\*$' | sed '/\*\//d'|grep -v '^$'; 
}

function ipchk() {
  grep --color -ir $1 /cygdrive/c/Users/bf591ah/Documents/Supported_Tools/STEALTHWATCH/IPAM.txt
}

function dr8dl() {
  echo 'composer require drupal/$1'
  # composer require drupal/$1
}

function grepip() {
  grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' $1
}

function strcmp() {
  [[ "${1}" == "${2}" ]]  && echo "Equal" || echo "Not equal"
}

function airport() {
  grep --color -ir $1 /cygdrive/c/Users/bf591ah/Documents/Supported_Tools/AUTOMATION/HGA/bluecat/Airports.txt
}

function aptmods(){ apt list --installed | grep $1 | cut -d '/' -f1; }

function HR(){ 
    # 1K = 1024, 1M = 1048576
    echo "$(numfmt --padding=6 --to=iec ${1})" 
}
function AddCommas(){
    # 1K = 1000, 1M = 1000000
    echo "$(numfmt --padding=6 --to=si ${1})" 
}

function Wake()
{
  MAC=${1:-F48E3890F0AD} # default is "NEST" Windows Desktop
  Broadcast=255.255.255.255
  PortNumber=9
  echo -e $(echo $(printf 'f%.0s' {1..12}; printf "$(echo $MAC | sed 's/[:-]//g')%.0s" {1..16}) | sed -e 's/../\\x&/g') | nc -w1 -u -b $Broadcast $PortNumber
}
alias Wake_Backups="Wake 002564CA3E5A" # Will wake up the Proxmox Backup Server [PBS]
alias Wake_Cooee="Wake DA4CD50CA681" # Will wake up the Secondary PVE Server [Cooee]
alias Wake_Nest="Wake F48E3890F0AD" # Wake NEST - CDM Windows Desktop

function cmp.bash.aliases()
{
  cd /tmp;
  wget https://raw.githubusercontent.com/netdesignate/dotfiles/master/.bash_aliases
  mv .bash_aliases $(hostname).bash_aliases;
  printf "diff ~/.bash_aliases /tmp/$(hostname).bash_aliases\n=============================================\n"
  diff ~/.bash_aliases /tmp/$(hostname).bash_aliases;
  rm $(hostname).bash_aliases;
}

function bytesToHR()
{
  local SIZE=$1
  local UNITS="Bps KBps MBps GBps TBps PBps"
  for F in $UNITS; do
    local UNIT=$F
    test ${SIZE%.*} -lt 1024 && break;
    SIZE=$(echo "$SIZE / 1024" | bc -l)
  done

  if [ "$UNIT" == "B" ]; then
    printf "%4.0f    %s\n" $SIZE $UNIT
  else
    printf "%7.02f %s\n" $SIZE $UNIT
  fi
}

function ToK()
{ # down to multiples of 10**3
  local SIZE=$1
  local UNITS="pps Kpps Mpps Gpps Tpps Ppps"
  for F in $UNITS; do
    local UNIT=$F
    test ${SIZE%.*} -lt 1000 && break;
    SIZE=$(echo "$SIZE / 1000" | bc -l)
  done

  if [ "$UNIT" == "B" ]; then
    printf "%4.0f    %s\n" $SIZE $UNIT
  else
    printf "%7.02f %s\n" $SIZE $UNIT
  fi
}

export -f Wake
export -f cmp.bash.aliases
export -f urldecode
export -f histgrep
export -f nocomment
export -f ipchk
export -f myip
export -f aptmods
export -f dug
export -f dr8dl
export -f grepip
export -f strcmp
export -f airport
export -f aptmods
export -f uc
export -f lc
export -f AddCommas
export -f HR
export -f ToK
